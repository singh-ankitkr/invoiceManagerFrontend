import { Button, TextField } from "@mui/material";
import type { NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import { SubmitHandler, useForm } from "react-hook-form";
import { backendApi } from "../src/components/api/Fetch";

import { yupResolver } from "@hookform/resolvers/yup";
import * as yup from "yup";
import { useRouter } from "next/router";

type CompanyDetails = {
  name: string;
  address: string;
  vatNumber: string;
  regNumber: string;
  iban: string;
  swift: string;
};

const companyDetailsSchema = yup.object({
  name: yup
    .string()
    .required("Company Name is required.")
    .min(3, "Minimum length of 3 is required.")
    .max(16, "Maximum length of 16 is allowed."),
  address: yup.string().required("Address field is required."),
  vatNumber: yup.string().required("Vat number is required."),
  regNumber: yup.string().required("Registration number is required."),
  iban: yup.string().required("Iban is required."),
  swift: yup.string().required("Swift is required."),
});

const CompanyDetails: NextPage = () => {
  const [isUpdating, setIsUpdating] = useState(false);
  const [firstTimeSetting, setFirstTimeSetting] = useState(true);

  const [successMessage, setSuccessMessage] = useState("");
  const [formError, setFormError] = useState("");

  const router = useRouter();

  const {
    register,
    handleSubmit,
    setValue,
    formState: { errors },
  } = useForm<CompanyDetails>({
    resolver: yupResolver(companyDetailsSchema),
  });

  const onSubmit: SubmitHandler<CompanyDetails> = (data: CompanyDetails) => {
    const callUpdateCompanyDetailsApi = async () => {
      setIsUpdating(true);
      try {
        const response = await backendApi.put("/me/company", data);
        if (response.status == 200) {
          setSuccessMessage("Successfully updated the company details");
          setIsUpdating(false);
          if (firstTimeSetting) {
            router.push("/");
          }
        }
      } catch (e) {
        if (e.response.status === 0 || e.response.status === 500) {
          setFormError(
            "Server unreachabe/unresponsive, Please try again in some time."
          );
        }
        setIsUpdating(false);
      }
    };

    callUpdateCompanyDetailsApi();
    console.log(data);
  };

  useEffect(() => {
    const fetchCompanyDetails = async () => {
      const response = await backendApi.get("/me");
      console.log("hello company details");
      console.log(response);
      if (response.status == 200) {
        if (response.data["companyDetails"] != null) {
          // Prefilling the form with the received company details
          setValue("name", response.data["companyDetails"]["name"]);
          setValue("address", response.data["companyDetails"]["address"]);
          setValue("vatNumber", response.data["companyDetails"]["vatNumber"]);
          setValue("regNumber", response.data["companyDetails"]["regNumber"]);
          setValue("iban", response.data["companyDetails"]["iban"]);
          setValue("swift", response.data["companyDetails"]["swift"]);
          setFirstTimeSetting(false);
        }
      }
    };
    fetchCompanyDetails();
  }, []);

  return (
    <>
      <Head>
        <title>Company details</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <form
        style={{
          marginLeft: "25%",
          marginRight: "25%",
          marginTop: "10%",
          width: "50%",
          textAlign: "center",
        }}
        onSubmit={handleSubmit(onSubmit)}
      >
        <h2>Company Details</h2>
        <p style={{ color: "red" }} hidden={formError === ""}>
          {formError}
        </p>

        <p style={{ color: "green" }} hidden={successMessage === ""}>
          {successMessage}
        </p>
        <TextField
          {...register("name")}
          label="Company Name"
          InputLabelProps={{ shrink: true }}
          inputProps={{ "data-test": "company-name" }}
          fullWidth
        />
        <p style={{ color: "red" }} data-test="company-name-error">
          {errors.name?.message}
        </p>

        <TextField
          {...register("address")}
          inputProps={{ "data-test": "company-address" }}
          label="Company Address"
          InputLabelProps={{ shrink: true }}
          fullWidth
        />
        <p data-test="company-address-error" style={{ color: "red" }}>
          {errors.address?.message}
        </p>

        <TextField
          {...register("vatNumber")}
          inputProps={{ "data-test": "company-vat" }}
          label="VAT number"
          InputLabelProps={{ shrink: true }}
          fullWidth
        />
        <p data-test="company-vat-error" style={{ color: "red" }}>
          {errors.vatNumber?.message}
        </p>

        <TextField
          {...register("regNumber")}
          inputProps={{ "data-test": "company-reg-number" }}
          label="Registration Number"
          InputLabelProps={{ shrink: true }}
          fullWidth
        />
        <p data-test="company-reg-error" style={{ color: "red" }}>
          {errors.regNumber?.message}
        </p>

        <TextField
          {...register("iban")}
          inputProps={{ "data-test": "company-iban" }}
          label="iban"
          InputLabelProps={{ shrink: true }}
          fullWidth
        />
        <p data-test="company-iban-error" style={{ color: "red" }}>
          {errors.iban?.message}
        </p>

        <TextField
          {...register("swift")}
          inputProps={{ "data-test": "company-swift" }}
          label="Swift"
          InputLabelProps={{ shrink: true }}
          fullWidth
        />
        <p data-test="company-swift-error" style={{ color: "red" }}>
          {errors.swift?.message}
        </p>

        <Button
          variant="contained"
          type="submit"
          fullWidth
          disabled={isUpdating}
        >
          Save
        </Button>
      </form>
    </>
  );
};

export default CompanyDetails;
